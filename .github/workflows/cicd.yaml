# Workflow name displayed in the GitHub Actions tab
name: Build and Push Docker Image

# Trigger this workflow on a push to any tag starting with 'v' OR manually
on:
  push:
    tags:
      - 'v*' # e.g., v1.0, v2.1.3
  workflow_dispatch:
    # Inputs for manual workflow runs
    inputs:
      code_release:
        description: 'Code Server Version'
        required: true
        default: '4.102.2'
      go_version:
        description: 'Go Version (leave empty to use latest stable)'
        required: false
        default: ''
      node_version_major:
        description: 'Node.js Major Version'
        required: true
        type: choice
        options:
        - '22' # Current
        - '20' # LTS
        - '18' # LTS
        default: '20'
      python_version_minor:
        description: 'Python Minor Version'
        required: true
        type: choice
        options:
        - '3.12'
        - '3.11'
        - '3.10'
        - '3.9'
        default: '3.12'

# Environment variables available to all jobs in this workflow
env:
  # Docker Hub image name. Replace with your own.
  DOCKER_IMAGE: luandnh1998/ltek-code-server

jobs:
  build-and-push:
    # Run this job on the latest Ubuntu runner
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository's code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub
      # Use secrets for secure authentication
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Extract Docker metadata (tags and labels)
      # Automatically creates smart tags from the Git tag
      - name: Extract Metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=true

      # Step 4: Get latest Go version
      # Fetches the latest stable Go version if no specific version is provided as input
      - name: Get latest Go version
        id: get_go_version
        if: github.event.inputs.go_version == ''
        run: |
          LATEST_GO_VERSION=$(curl -s "https://go.dev/dl/?mode=json" | jq -r '.[0].version' | sed 's/go//')
          echo "version=${LATEST_GO_VERSION}" >> $GITHUB_OUTPUT
          
      # Step 5: Get latest Python patch version
      # Fetches the latest patch for the selected Python minor version, ignoring pre-releases
      - name: Get latest Python patch version
        id: get_python_version
        run: |
          set -eo pipefail
          MINOR_VERSION=${{ github.event.inputs.python_version_minor || '3.12' }}
          echo "Fetching latest patch for Python ${MINOR_VERSION}..."
          LATEST_PYTHON_VERSION=$(curl -s -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/python/cpython/tags | jq -r --arg V "v${MINOR_VERSION}." '[.[] | .name | select(startswith($V) and (test("rc|a|b") | not))] | sort_by(split(".") | map(tonumber)) | .[-1] | ltrimstr("v")')
          
          if [ -z "$LATEST_PYTHON_VERSION" ]; then
            echo "::error::Could not determine latest Python version for ${MINOR_VERSION}."
            exit 1
          fi
          
          echo "Found latest Python version: ${LATEST_PYTHON_VERSION}"
          echo "version=${LATEST_PYTHON_VERSION}" >> $GITHUB_OUTPUT

      # Step 6: Get latest Node.js version
      # Fetches the latest patch for the selected Node.js major version
      - name: Get latest Node.js version
        id: get_node_version
        run: |
          MAJOR_VERSION=${{ github.event.inputs.node_version_major || '20' }}
          LATEST_NODE_VERSION=$(curl -s https://nodejs.org/dist/index.json | jq -r --arg V "v${MAJOR_VERSION}." '[.[] | select(.version | startswith($V))] | .[0].version | ltrimstr("v")')
          echo "version=${LATEST_NODE_VERSION}" >> $GITHUB_OUTPUT

      # Step 7: Set up Docker Buildx
      # A Docker CLI plugin for building multi-platform images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 8: Build and push the Docker image
      # Uses the extracted metadata and passes build arguments to the Dockerfile
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            CODE_RELEASE=${{ github.event.inputs.code_release || '4.102.2' }}
            GO_VERSION=${{ github.event.inputs.go_version || steps.get_go_version.outputs.version }}
            NODE_VERSION=${{ steps.get_node_version.outputs.version }}
            PYTHON_VERSION=${{ steps.get_python_version.outputs.version }}
